import numpy as np
import pandas as pd
from sklearn import linear_model
import sklearn
from sklearn.utils import shuffle
import matplotlib.pyplot as plt
from matplotlib import style
import pickle

style.use("ggplot")

data = pd.read_csv("C:\\Users\\Asus\\OneDrive\\Desktop\\Project\\Machine learning\\student_mat_2173a47420.csv", sep=";")

predict = "G3"

data = data[["G1", "G2", "absences","failures", "studytime","G3"]]
data = shuffle(data) # Optional - shuffle the data

x = np.array(data.drop([predict], 1))
y =np.array(data[predict])
x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(x, y, test_size=0.1)


# TRAIN MODEL MULTIPLE TIMES FOR BEST SCORE
best = 0
for _ in range(20):
    x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(x, y, test_size=0.1)

    linear = linear_model.LinearRegression()

    linear.fit(x_train, y_train)
    acc = linear.score(x_test, y_test)
    print("Accuracy: " + str(acc))

    if acc > best:
        best = acc
        with open("studentgrades.pickle", "wb") as f:
            pickle.dump(linear, f)

# LOAD MODEL
pickle_in = open("studentgrades.pickle", "rb")
linear = pickle.load(pickle_in)


print("-------------------------")
print('Coefficient: \n', linear.coef_)
print('Intercept: \n', linear.intercept_)
print("-------------------------")

predicted= linear.predict(x_test)
for x in range(len(predicted)):
    print(predicted[x], x_test[x], y_test[x])


# Drawing and plotting model
plot = "failures"
plt.scatter(data[plot], data["G3"])
plt.legend(loc=4)
plt.xlabel(plot)
plt.ylabel("Final Grade")
plt.show()
Accuracy: 0.8640040095981187
Accuracy: 0.8810049289508112
Accuracy: 0.9205358144488985
Accuracy: 0.859711996652036
Accuracy: 0.9229878124463807
Accuracy: 0.7612767869215783
Accuracy: 0.7600434843670609
Accuracy: 0.8321871972475868
Accuracy: 0.9072706822016597
Accuracy: 0.7803035004132122
Accuracy: 0.8857220106225372
Accuracy: 0.9095804839702603
Accuracy: 0.8716414454595635
Accuracy: 0.7244769788743208
Accuracy: 0.8073691998599061
Accuracy: 0.7173310358263175
Accuracy: 0.7881595375413614
Accuracy: 0.8408145834283824
Accuracy: 0.9144987391533622
Accuracy: 0.8738344808590286
-------------------------
Coefficient: 
 [ 0.15188917  0.97579134  0.03525441 -0.28264489 -0.21242296]
Intercept: 
 -1.4097610967304242
-------------------------
4.414888506360668 [6 5 7 0 1] 6
7.843159465433494 [10  8 10  0  2] 8
3.9448131607850128 [5 5 4 0 2] 6
11.135231862253878 [ 9 12  3  0  3] 11
8.385026391822938 [9 9 2 0 2] 10
9.44219809103263 [10 10  0  0  2] 10
13.952920133470275 [14 14  0  0  2] 14
16.360170323999643 [17 16  0  0  2] 16
12.15625263079734 [10 13  6  0  4] 13
10.721767770952582 [12 11  0  0  2] 12
3.602817890549832 [6 5 0 2 1] 0
8.738466973787913 [9 9 6 0 1] 10
6.387604639623585 [8 7 7 1 1] 8
7.6201518423662105 [ 9  8 16  1  2] 7
6.78537812386678 [ 9  7 20  1  2] 8
-0.9232719991982411 [6 0 0 0 2] 0
18.017949689521032 [16 18  2  0  3] 18
8.444663656711562 [8 9 8 0 2] 10
15.302998624789954 [16 15  2  0  2] 15
16.911115746967447 [17 17  0  0  4] 18
12.895748434260586 [13 13  2  0  2] 11
12.050999694216427 [12 12  4  0  1] 13
13.046741078604759 [14 13  8  0  3] 14
11.555644964485642 [12 12  2  0  3] 11
12.308141800107881 [11 13  6  0  4] 14
12.895748434260586 [13 13  2  0  2] 13
8.233137222512397 [8 9 2 0 2] 8
8.041560831402695 [10  9  0  0  4] 0
15.15110945547941 [15 15  2  0  2] 14
12.814654958959114 [12 13  6  1  1] 14
12.673350453550324 [12 13  0  0  2] 13
13.881514797104186 [14 14  4  0  3] 14
10.145032683310976 [11 11  0  0  4] 11
-0.4676044912666172 [9 0 0 0 2] 0
6.997514200422966 [ 9  7 18  0  2] 6
18.403108386052935 [19 18  0  0  3] 19
12.799573994258035 [16 12  8  0  1] 13
9.725129861597884 [10 10  2  0  1] 10
16.222688992333133 [14 16  3  0  1] 16
14.386844548379703 [15 14  8  0  2] 14

